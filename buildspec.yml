version: 0.2

env:
  variables:
    SONAR_HOST_URL: "http://3.110.130.90:9000"
    SONAR_PROJECT_KEY: "Sonarqube"
    SONAR_PROJECT_NAME: "Sonarqube"
    SONAR_PROJECT_VERSION: "1.0"
    SONAR_SCANNER_VERSION: "4.6.0.2311"
    SONAR_TOKEN: "sqp_8bc26bcc6a87780358a0af3c361a068beba38cc0"

phases:
  install:
    runtime-versions:
      java: corretto11 # Use the appropriate Java version for your project
    commands:
      - echo Installing SonarQube Scanner...
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip
      - unzip sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip
      - export PATH=$PATH:$(pwd)/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/bin

  pre_build:
    commands:
      - echo Starting pre-build phase...

  build:
    commands:
      - echo Starting build phase...
      - ./gradlew build # or your preferred build command
      - echo Running SonarQube analysis...
      - sonar-scanner -Dsonar.projectKey=test1-Dsonar.sources=. -Dsonar.host.url=//13.201.38.240:9000 -Dsonar.login=sqp_30cf87fbd8270d62c57ae7cfb32d0f34540e4182

  post_build:
    commands:
      - echo Checking SonarQube Quality Gate...
      - STATUS=$(curl -s -u $SONAR_TOKEN: $SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY | jq -r .projectStatus.status)
      - echo Quality Gate status: $STATUS
      - if [[ "$STATUS" != "OK" ]]; then exit 1; fi

artifacts:
  files:
    - target/**/*

cache:
  paths:
    - '/root/.m2/**/*'
    - 'sonar-scanner-${SONAR_SCANNER_VERSION}-linux/**/*'
